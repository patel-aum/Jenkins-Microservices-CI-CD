pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        KUBECONFIG = credentials('kubeconfig')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                sh 'mvn clean package'
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['hello1', 'hello2']
                    services.each { service ->
                        dir("${service}") {
                            docker.build("your-dockerhub-username/${service}:${env.BUILD_NUMBER}")
                        }
                    }
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        def services = ['hello1', 'hello2']
                        services.each { service ->
                            docker.image("your-dockerhub-username/${service}:${env.BUILD_NUMBER}").push()
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def services = ['hello1', 'hello2']
                    services.each { service ->
                        sh "sed -i 's|{{IMAGE_TAG}}|${env.BUILD_NUMBER}|g' kubernetes/${service}-deployment.yaml"
                        sh "kubectl --kubeconfig $KUBECONFIG apply -f kubernetes/${service}-deployment.yaml"
                        sh "kubectl --kubeconfig $KUBECONFIG apply -f kubernetes/${service}-service.yaml"
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}